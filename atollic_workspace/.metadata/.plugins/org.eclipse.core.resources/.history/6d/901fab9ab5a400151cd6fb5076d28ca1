/**
  ******************************************************************************
  * File Name          : main.c
  * Date               : 20/01/2015 08:42:31
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2015 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "stm32l0xx_hal.h"
#include "stm32l0_cc2500.h"
#include "libutrusta.h"
#include "main.h"
#include <stdbool.h>
#include <string.h>

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN 0 */
uint8_t spi_rx_buffer[10] = {0};
uint8_t spi_tx_buffer[10] = {0};

/* USER CODE END 0 */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

void init_cc2500(void);

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* System interrupt init*/
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();


  /* USER CODE BEGIN 2 */
  init_cc2500();
  /* USER CODE END 2 */

  /* USER CODE BEGIN 3 */
  /* Infinite loop */
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
//	  HAL_Delay(50);

	  __WFI(); // wait for interrupt

  }
  /* USER CODE END 3 */

}


rc_t utrusta_set_light_off(void){
	uint8_t cnt = UTRUSTA_REPEAT_COUNTER;
	uint8_t	cmd[8];

	while(cnt--){

		cmd[0] = 0x06;	// packet length
		cmd[1] = (UTRUSTA_REMOTE_START & 0xff00) >> 8;
		cmd[2] = (UTRUSTA_REMOTE_START & 0x00ff);
		cmd[3] = (UTRUSTA_REMOTE_ID & 0xff00) >> 8;
		cmd[4] = (UTRUSTA_REMOTE_ID & 0x00ff);
		cmd[5] = UTRUSTA_REMOTE_STATE_OFF;
		cmd[6] = (UTRUSTA_REMOTE_END & 0xff00) >> 8;
		cmd[7] = (UTRUSTA_REMOTE_END & 0xff);

		cc2500_xfer_cmd(CC2500_SIDLE); 	// TX/RX off
		cc2500_xfer_cmd(CC2500_SFTX);	// Flush TX FIFO
		cc2500_xfer_tx(true, &cmd[0], 8);	// send data to TX FIFO
		cc2500_xfer_cmd(CC2500_STX);	// Enable TX
	}
	return RC_OK;
}

rc_t utrusta_set_light_low(void){
	uint8_t cnt = UTRUSTA_REPEAT_COUNTER;
	uint8_t	cmd[8];

	while(cnt--){
		cmd[0] = 0x06;	// packet length
		cmd[1] = (UTRUSTA_REMOTE_START & 0xff00) >> 8;
		cmd[2] = (UTRUSTA_REMOTE_START & 0x00ff);
		cmd[3] = (UTRUSTA_REMOTE_ID & 0xff00) >> 8;
		cmd[4] = (UTRUSTA_REMOTE_ID & 0x00ff);
		cmd[5] = UTRUSTA_REMOTE_STATE_MID;
		cmd[6] = (UTRUSTA_REMOTE_END & 0xff00) >> 8;
		cmd[7] = (UTRUSTA_REMOTE_END & 0xff);

		cc2500_xfer_cmd(CC2500_SIDLE); 	// TX/RX off
		cc2500_xfer_cmd(CC2500_SFTX);	// Flush TX FIFO
		cc2500_xfer_tx(true, &cmd[0], 8);	// send data to TX FIFO
		cc2500_xfer_cmd(CC2500_STX);	// Enable TX
	}
	return RC_OK;
}

rc_t utrusta_set_light_full(void){
	uint8_t cnt = UTRUSTA_REPEAT_COUNTER;
	uint8_t	cmd[8];

	while(cnt--){

		cmd[0] = 0x06;	// packet length
		cmd[1] = (UTRUSTA_REMOTE_START & 0xff00) >> 8;
		cmd[2] = (UTRUSTA_REMOTE_START & 0x00ff);
		cmd[3] = (UTRUSTA_REMOTE_ID & 0xff00) >> 8;
		cmd[4] = (UTRUSTA_REMOTE_ID & 0x00ff);
		cmd[5] = UTRUSTA_REMOTE_STATE_HIGH;
		cmd[6] = (UTRUSTA_REMOTE_END & 0xff00) >> 8;
		cmd[7] = (UTRUSTA_REMOTE_END & 0xff);

		cc2500_xfer_cmd(CC2500_SIDLE); 	// TX/RX off
		cc2500_xfer_cmd(CC2500_SFTX);	// Flush TX FIFO
		cc2500_xfer_tx(true, &cmd[0], 8);	// send data to TX FIFO
		cc2500_xfer_cmd(CC2500_STX);	// Enable TX
	}
	return RC_OK;
}

rc_t utrusta_send_programm(void){
	uint8_t cnt = UTRUSTA_REPEAT_COUNTER;
	uint8_t	cmd[8];

	while(cnt--){
		cmd[0] = 0x06;	// packet length
		cmd[1] = (UTRUSTA_REMOTE_START & 0xff00) >> 8;
		cmd[2] = (UTRUSTA_REMOTE_START & 0x00ff);
		cmd[3] = (UTRUSTA_REMOTE_ID & 0xff00) >> 8;
		cmd[4] = (UTRUSTA_REMOTE_ID & 0x00ff);
		cmd[5] = UTRUSTA_REMOTE_STATE_PROGRAM;
		cmd[6] = (UTRUSTA_REMOTE_END & 0xff00) >> 8;
		cmd[7] = (UTRUSTA_REMOTE_END & 0xff);

		cc2500_xfer_cmd(CC2500_SIDLE); 	// TX/RX off
		cc2500_xfer_cmd(CC2500_SFTX);	// Flush TX FIFO
		cc2500_xfer_tx(true, &cmd[0], 8);	// send data to TX FIFO
		cc2500_xfer_cmd(CC2500_STX);	// Enable TX
	}
	return RC_OK;
}

void init_cc2500(void){
	rf_settings_t conf = rf_settings_default;

	cc2500_xfer_cmd(CC2500_SIDLE); // TX/RX off
	cc2500_xfer_cmd(CC2500_SRES);  // Chip Reset
	cc2500_xfer_reg(CC2500_IOCFG0, conf.iocfg0); // GPO2 conf
	cc2500_xfer_reg(CC2500_FIFOTHR, conf.fifothr);
	cc2500_xfer_reg(CC2500_SYNC1, conf.sync1);
	cc2500_xfer_reg(CC2500_SYNC0, conf.sync0);
	cc2500_xfer_reg(CC2500_FSCTRL1, conf.fsctrl1);
	cc2500_xfer_reg(CC2500_FSCTRL0, conf.fsctrl0);
	cc2500_xfer_reg(CC2500_FREQ2, conf.freq2);
	cc2500_xfer_reg(CC2500_FREQ1, conf.freq1);
	cc2500_xfer_reg(CC2500_FREQ0, conf.freq0);
	cc2500_xfer_reg(CC2500_MDMCFG4, conf.mdmcfg4);
	cc2500_xfer_reg(CC2500_MDMCFG3, conf.mdmcfg3);
	cc2500_xfer_reg(CC2500_MDMCFG2, conf.mdmcfg2);
	cc2500_xfer_reg(CC2500_MDMCFG1, conf.mdmcfg1);
	cc2500_xfer_reg(CC2500_MDMCFG0, conf.mdmcfg0);
	cc2500_xfer_reg(CC2500_CHANNR, conf.channr);
	cc2500_xfer_reg(CC2500_DEVIATN, conf.deviatn);
	cc2500_xfer_reg(CC2500_FREND1, conf.frend1);
	cc2500_xfer_reg(CC2500_FREND0, conf.frend0);
	cc2500_xfer_reg(CC2500_MCSM2, conf.mcsm2);
	cc2500_xfer_reg(CC2500_MCSM1, conf.mcsm1);
	cc2500_xfer_reg(CC2500_MCSM0, conf.mcsm0);
	cc2500_xfer_reg(CC2500_FOCCFG, conf.foccfg);
	cc2500_xfer_reg(CC2500_BSCFG, conf.bscfg);
	cc2500_xfer_reg(CC2500_AGCCTRL2, conf.agcctrl2);
	cc2500_xfer_reg(CC2500_AGCCTRL1, conf.agcctrl1);
	cc2500_xfer_reg(CC2500_AGCCTRL0, conf.agcctrl0);
	cc2500_xfer_reg(CC2500_FSCAL3, conf.fscal3);
	cc2500_xfer_reg(CC2500_FSCAL2, conf.fscal2);
	cc2500_xfer_reg(CC2500_FSCAL1, conf.fscal1);
	cc2500_xfer_reg(CC2500_FSCAL0, conf.fscal0);
	cc2500_xfer_reg(CC2500_RCCTRL1, conf.rcctrl1);
	cc2500_xfer_reg(CC2500_RCCTRL0, conf.rcctrl0);
	cc2500_xfer_reg(CC2500_WOREVT1, conf.worevt1);
	cc2500_xfer_reg(CC2500_WOREVT0, conf.worevt0);
	cc2500_xfer_reg(CC2500_WORCTRL, conf.worctrl);
	cc2500_xfer_reg(CC2500_FSTEST, conf.fstest);
	cc2500_xfer_reg(CC2500_TEST2, conf.test2);
	cc2500_xfer_reg(CC2500_TEST1, conf.test1);
	cc2500_xfer_reg(CC2500_TEST0, conf.test0);
	cc2500_xfer_reg(CC2500_IOCFG2, conf.iocfg2);
	cc2500_xfer_reg(CC2500_IOCFG0, conf.iocfg0);
	cc2500_xfer_reg(CC2500_PKTCTRL1, conf.pktctrl1);
	cc2500_xfer_reg(CC2500_PKTCTRL0, conf.pktctrl0);
	cc2500_xfer_reg(CC2500_ADDR, conf.addr);
	cc2500_xfer_reg(CC2500_PKTLEN, conf.pktlen);
	cc2500_xfer_reg(CC2500_ADDR, conf.addr);

}

void us_delay(uint16_t delay) {
	while(delay > 0) {
		delay--;
	}
}

rc_t cc2500_xfer_tx(bool burst, uint8_t* data, uint8_t len) {
	/* CC2500 send data with burst over SPI if requested, default = true*/
	spi_tx_buffer[0] = (burst ? CC2500_WRITE_SINGLE : CC2500_WRITE_BURST);
	/*length field for UTRUSTA lightning protocol*/
//	spi_tx_buffer[1] = len;
	/* SOF for UTRUSTA Protocol */
	memcpy(&spi_tx_buffer[1], data, len);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // NSS LOW
	HAL_SPI_Transmit(&hspi1, &spi_tx_buffer[0], len + 1, 100);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // NSS HIGH
	us_delay(UTRUSTA_INTER_FRAME_DELAY);
	return RC_OK;

}

rc_t cc2500_xfer_cmd(uint8_t cmd) {
	spi_tx_buffer[0] = cmd;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // NSS LOW
	HAL_SPI_TransmitReceive(&hspi1, &spi_tx_buffer[0], &spi_rx_buffer[0], 1, 100);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // NSS HIGH
	us_delay(UTRUSTA_INTER_FRAME_DELAY);
	if(spi_rx_buffer[0] == 0x0f) {
		return RC_OK;
	} else {
		return RC_FAILED;
	}
}

rc_t cc2500_xfer_reg(uint8_t cmd, uint8_t val) {
	spi_tx_buffer[0] = cmd;
	spi_tx_buffer[1] = val;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // NSS LOW
	HAL_SPI_TransmitReceive(&hspi1, &spi_tx_buffer[0], &spi_rx_buffer[0], 2, 100);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // NSS HIGH
	us_delay(UTRUSTA_INTER_FRAME_DELAY);
	if(spi_rx_buffer[0] == 0x0f) {
		return RC_OK;
	} else {
		return RC_FAILED;
	}
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);

  __SYSCFG_CLK_ENABLE();

}

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLED;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
  HAL_SPI_Init(&hspi1);

}

/** Configure pins as
        * Analog
        * Input
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __GPIOA_CLK_ENABLE();
  __GPIOB_CLK_ENABLE();

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  // Set Button Pin to HIGH on init and low on done to reduce power requirement
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);

  /*Configure GPIO pins : PB3 PB4 PB5 (Buttonpower) */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);


  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // Turn LED off


  NVIC_SetPriority(EXTI2_3_IRQn,1);
  NVIC_SetPriority(EXTI4_15_IRQn,1);

  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */

/**
  * @}
*/

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
